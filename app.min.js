/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__config_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_domify__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_domify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_domify__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__service_worker_js__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__service_worker_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__service_worker_js__);





let universes = getData()

const page1El = document.querySelector('.page.first')
const page2El = document.querySelector('.page.single')
const universesEl = document.querySelector('.universes')
const fightersEl = document.querySelector('.fighters')

let theUniverseIndex = 0

for (const [index, universe] of universes.entries()) {
  const universeEl = __WEBPACK_IMPORTED_MODULE_1_domify___default()(`<li class="universe" data-universe="${index}" title="${universe.name}">${index+1}</li>`)
  if (universe.participating === false) {
    universeEl.classList.add('disabled')
  }
  const rotation = (360 / universes.length * index) - 90
  universeEl.style.transform = `
    translate(-7.5vmin, -7.5vmin)
    rotate(${rotation}deg)
    translate(29vmin)
    rotate(${rotation * -1}deg)
  `
  universesEl.appendChild(universeEl)
}

page1El.addEventListener('click', e => {
  if (!e.target.classList.contains('universe')) {
    return
  }
  page1El.style.display = 'none'
  page2El.style.display = 'flex'
  initSingle(parseInt(e.target.getAttribute('data-universe')))
})

function initSingle(universeIndex) {
  theUniverseIndex = universeIndex
  const universe = universes[universeIndex]
  page2El.setAttribute('data-universe', universeIndex + 1)
  fightersEl.innerHTML = ''
  for (const [index, fighter] of universe.fighters.entries()) {
    const removed = isFighterRemoved(universeIndex, index) ? 'removed' : ''
    const fighterEl = __WEBPACK_IMPORTED_MODULE_1_domify___default()(`
          <li class="fighter ${removed}" data-fighter="${index}" title="${fighter.name}">
            <div class="colour-border">
              <div class="fighter-image" style="background-image: url('/images/fighters/${universeIndex+1}-${index+1}.jpg')">
                <span class="spacer"></span>
                <span class="fighter-name">${fighter.name}</span>
              </div>
            </div>
          </li>
        `)
    fightersEl.appendChild(fighterEl)
  }
  page2El.querySelector('.universe-icon').textContent = universeIndex + 1
  page2El.querySelector('.universe-name').textContent = universe.name
}

page2El.addEventListener('click', e => {
  if (!e.target.matches('.fighter *')) {
    return
  }
  const fighterEl = e.target.closest('.fighter')
  if (fighterEl.classList.contains('removed')) {
    fighterEl.classList.remove('removed')
    addFighter(theUniverseIndex, fighterEl.getAttribute('data-fighter'))
  } else {
    fighterEl.classList.add('removed')
    removeFighter(theUniverseIndex, fighterEl.getAttribute('data-fighter'))
  }
})

page2El.querySelector('.back-button').addEventListener('click', e => {
  page2El.style.display = 'none'
  page1El.style.display = 'flex'
})

function isFighterRemoved(universeIndex, fighterIndex) {
  if (universes[universeIndex].fighters[fighterIndex].removed === true) {
    return true
  }
  return false
}

function removeFighter(universeIndex, fighterIndex) {
  universes[universeIndex].fighters[fighterIndex].removed = true
  saveData()
}

function addFighter(universeIndex, fighterIndex) {
  universes[universeIndex].fighters[fighterIndex].removed = false
  saveData()
}

function getData() {
  if (localStorage.getItem('universes')) {
    return JSON.parse(localStorage.getItem('universes'))
  }
  return __WEBPACK_IMPORTED_MODULE_0__config_js__["a" /* default */]
}

function saveData() {
  localStorage.setItem('universes', JSON.stringify(universes))
}

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ([
  {
    name: 'Universe 1',
    participating: false,
    fighters: []
  },
  {
    name: 'Universe 2',
    supremeKai: 'Peru',
    destruction: 'Helles',
    angel: 'Sour',
    fighters: [
      {
        name: 'Brianne de Chateau'
      },
      {
        name: 'Sanka Ku'
      },
      {
        name: 'Su Roas'
      },
      {
        name: 'Zarbuto'
      },
      {
        name: 'Rabanra'
      },
      {
        name: 'Jimeze'
      },
      {
        name: 'Vikal'
      },
      {
        name: 'Zirloin'
      },
      {
        name: 'Prum'
      },
      {
        name: 'Harmira'
      }
    ]
  },
  {
    name: 'Universe 3',
    supremeKai: 'Ea',
    destruction: 'Mosco',
    angel: 'Campari',
    fighters: [
      {
        name: 'The Preecho'
      },
      {
        name: 'Narirama'
      },
      {
        name: 'Maji=Kayo'
      },
      {
        name: 'Catopesra'
      },
      {
        name: 'Borareta'
      },
      {
        name: 'Koitsukai'
      },
      {
        name: 'Paparoni'
      },
      {
        name: 'Biarra'
      },
      {
        name: 'Pancea'
      },
      {
        name: 'Nigrisshi'
      }
    ]
  },
  {
    name: 'Universe 4',
    supremeKai: 'Kuru',
    destruction: 'Quitela',
    angel: 'Cognac',
    fighters: [
      {
        name: 'Damom'
      },
      {
        name: 'Ganos'
      },
      {
        name: 'Caway'
      },
      {
        name: 'Dercori'
      },
      {
        name: 'Shosa'
      },
      {
        name: 'Monna'
      },
      {
        name: 'Nink'
      },
      {
        name: 'Majora'
      },
      {
        name: 'Gamisaras'
      },
      {
        name: 'Shantsa'
      }
    ]
  },
  {
    name: 'Universe 5',
    participating: false,
    fighters: []
  },
  {
    name: 'Universe 6',
    supremeKai: 'Fuwa',
    destruction: 'Champa',
    angel: 'Vados',
    fighters: [
      {
        name: 'Hit'
      },
      {
        name: 'Frost'
      },
      {
        name: 'Magetta'
      },
      {
        name: 'Botamo'
      },
      {
        name: 'Cabba'
      },
      {
        name: 'Saonel'
      },
      {
        name: 'Pilina'
      },
      {
        name: 'Kale'
      },
      {
        name: 'Caulifla'
      },
      {
        name: 'Dr. Rota'
      }
    ]
  },
  {
    name: 'Universe 7',
    supremeKai: 'Kai',
    destruction: 'Beerus',
    angel: 'Whis',
    fighters: [
      {
        name: 'Goku'
      },
      {
        name: 'Vegeta'
      },
      {
        name: 'Gohan'
      },
      {
        name: 'Piccolo'
      },
      {
        name: 'Tien'
      },
      {
        name: 'Roshi'
      },
      {
        name: 'Krillin'
      },
      {
        name: 'Android 18'
      },
      {
        name: 'Android 17'
      },
      {
        name: 'Freiza'
      }
    ]
  },
  {
    name: 'Universe 8',
    participating: false,
    fighters: []
  },
  {
    name: 'Universe 9',
    supremeKai: 'Roh',
    destruction: 'Sidra',
    angel: 'Mojito',
    fighters: [
      {
        name: 'Basil'
      },
      {
        name: 'Lavender'
      },
      {
        name: 'Bergamo'
      },
      {
        name: 'Roselle'
      },
      {
        name: 'Oregano'
      },
      {
        name: 'Hyssop'
      },
      {
        name: 'Chappil'
      },
      {
        name: 'Sorrel'
      },
      {
        name: 'Hop'
      },
      {
        name: 'Comfrey'
      }
    ]
  },
  {
    name: 'Universe 10',
    supremeKai: 'Gowasu',
    destruction: 'Rumsshi',
    angel: 'Cus',
    fighters: [
      {
        name: 'Murichim'
      },
      {
        name: 'Lilibeu'
      },
      {
        name: 'Jirasen'
      },
      {
        name: 'Murisam'
      },
      {
        name: 'Methiop'
      },
      {
        name: 'Napapa'
      },
      {
        name: 'Rubalt'
      },
      {
        name: 'Jilcol'
      },
      {
        name: 'Obuni'
      },
      {
        name: 'Jium'
      }
    ]
  },
  {
    name: 'Universe 11',
    supremeKai: 'Khai',
    destruction: 'Belmod',
    angel: 'Marcarita',
    fighters: [
      {
        name: 'Jiren'
      },
      {
        name: 'Toppo'
      },
      {
        name: 'Dyspo'
      },
      {
        name: 'Vuon'
      },
      {
        name: 'Kunshi'
      },
      {
        name: 'Tupper'
      },
      {
        name: 'Zoiray'
      },
      {
        name: 'Cocotte'
      },
      {
        name: 'Kettol'
      },
      {
        name: 'Kahseral'
      }
    ]
  },
  {
    name: 'Universe 12',
    participating: false,
    fighters: []
  }
]);

/***/ }),
/* 2 */
/***/ (function(module, exports) {


/**
 * Expose `parse`.
 */

module.exports = parse;

/**
 * Tests for browser support.
 */

var innerHTMLBug = false;
var bugTestDiv;
if (typeof document !== 'undefined') {
  bugTestDiv = document.createElement('div');
  // Setup
  bugTestDiv.innerHTML = '  <link/><table></table><a href="/a">a</a><input type="checkbox"/>';
  // Make sure that link elements get serialized correctly by innerHTML
  // This requires a wrapper element in IE
  innerHTMLBug = !bugTestDiv.getElementsByTagName('link').length;
  bugTestDiv = undefined;
}

/**
 * Wrap map from jquery.
 */

var map = {
  legend: [1, '<fieldset>', '</fieldset>'],
  tr: [2, '<table><tbody>', '</tbody></table>'],
  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  // for script/link/style tags to work in IE6-8, you have to wrap
  // in a div with a non-whitespace character in front, ha!
  _default: innerHTMLBug ? [1, 'X<div>', '</div>'] : [0, '', '']
};

map.td =
map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

map.option =
map.optgroup = [1, '<select multiple="multiple">', '</select>'];

map.thead =
map.tbody =
map.colgroup =
map.caption =
map.tfoot = [1, '<table>', '</table>'];

map.polyline =
map.ellipse =
map.polygon =
map.circle =
map.text =
map.line =
map.path =
map.rect =
map.g = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">','</svg>'];

/**
 * Parse `html` and return a DOM Node instance, which could be a TextNode,
 * HTML DOM Node of some kind (<div> for example), or a DocumentFragment
 * instance, depending on the contents of the `html` string.
 *
 * @param {String} html - HTML string to "domify"
 * @param {Document} doc - The `document` instance to create the Node for
 * @return {DOMNode} the TextNode, DOM Node, or DocumentFragment instance
 * @api private
 */

function parse(html, doc) {
  if ('string' != typeof html) throw new TypeError('String expected');

  // default to the global `document` object
  if (!doc) doc = document;

  // tag name
  var m = /<([\w:]+)/.exec(html);
  if (!m) return doc.createTextNode(html);

  html = html.replace(/^\s+|\s+$/g, ''); // Remove leading/trailing whitespace

  var tag = m[1];

  // body support
  if (tag == 'body') {
    var el = doc.createElement('html');
    el.innerHTML = html;
    return el.removeChild(el.lastChild);
  }

  // wrap map
  var wrap = map[tag] || map._default;
  var depth = wrap[0];
  var prefix = wrap[1];
  var suffix = wrap[2];
  var el = doc.createElement('div');
  el.innerHTML = prefix + html + suffix;
  while (depth--) el = el.lastChild;

  // one element
  if (el.firstChild == el.lastChild) {
    return el.removeChild(el.firstChild);
  }

  // several elements
  var fragment = doc.createDocumentFragment();
  while (el.firstChild) {
    fragment.appendChild(el.removeChild(el.firstChild));
  }

  return fragment;
}


/***/ }),
/* 3 */
/***/ (function(module, exports) {

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('service-worker.js').then(function(reg) {
      reg.onupdatefound = function() {
        var installingWorker = reg.installing;
        installingWorker.onstatechange = function() {
          switch (installingWorker.state) {
            case 'installed':
              if (navigator.serviceWorker.controller) {
                console.log('New or updated content is available.');
              } else {
                console.log('Content is now available offline!');
              }
              break;

            case 'redundant':
              console.error('The installing service worker became redundant.');
              break;
          }
        };
      };
    }).catch(function(e) {
      console.error('Error during service worker registration:', e);
    });
  });
}


/***/ })
/******/ ]);
//# sourceMappingURL=app.min.js.map